#"!/bin/bash

source ~/.cienv

echo '</pre><h3>Testing</h3><pre>'

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

if [ "$MODE" = "" ]; then
  echo 'MODE not set'
  exit 2
fi

if [ "$STORAGE" = "" ]; then
  echo 'STORAGE not set'
  exit 2
fi

if [ "$TS" = "" ]; then
  TS="adhoc"
fi

start_cluster() {
  for a in {1..3}; do
    echo "Starting server: attempt $a"
    stop_cluster
    cd $WORKSPACE/ns_server
    ./cluster_run -n4 1>$WORKSPACE/run.log 2>&1 &
    disown
    for i in {1..120}; do
      grep -qs 'Couchbase Server has started' logs/n_0/info.log && \
        grep -qs 'Couchbase Server has started' logs/n_1/info.log && \
          wget -qO- http://localhost:9000/ &>/dev/null &&
            wget -qO- http://localhost:9001/ &>/dev/null &&
              ok_run=1 && break
      sleep 3
    done
    test "$ok_run" || continue
    sleep 30
    ./cluster_connect -n2 -s 1500 -I 1500 -T n0:kv+n1ql,n1:kv+index >$WORKSPACE/run.log 2>&1 &
    for i in {1..120}; do
      grep -qs 'Bucket "default" marked as warmed' logs/n_0/info.log && \
        grep -qs 'Bucket "default" marked as warmed' logs/n_1/info.log && \
          ok_connect=1 && break
      sleep 3
    done
    test "$ok_connect" || continue
    break
  done
  test "$ok_run" || error_exit "Server startup failed even after 3 tries"
  test "$ok_connect" || error_exit "Server connect failed even after 3 tries"
  sleep 60
}

stop_cluster() {
  killall -ABRT indexer 1>/dev/null 2>&1
  killall -ABRT projector 1>/dev/null 2>&1
  pkill -f cluster_
  pkill -f $WORKSPACE/install/bin
  pkill -f testrunner
  pkill -f $WORKSPACE/install
  pkill -f testrunner
  killall beam.smp epmd memcached projector indexer gometa python memcached.json 1>/dev/null 2>&1
  sleep 10
  killall -9 beam.smp epmd memcached projector indexer gometa python memcached.json 1>/dev/null 2>&1
  cd $WORKSPACE/ns_server
  make dataclean 1>/dev/null 2>&1
  sudo rm -f /tmp/core*
  sleep 10
}

collect_logs() {
  if [ "$phase" = "" ]; then phase=unknown; fi
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar ns_server/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar testrunner/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar test.log 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar run.log 1>/dev/null 2>&1
}

setUsernamePassword() {
   cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/
   export Username=$(grep -E -o ".Username\":.{0,20}" config/buildtest_$STORAGE.json | awk '{print $2}' | cut -d'"' -f2)
   export Password=$(grep -E -o ".Password\":.{0,20}" config/buildtest_$STORAGE.json | awk '{print $2}' | cut -d'"' -f2)
}

error_email() {
  if [ ! -f ~/.cigreen ]; then return; fi
  rm ~/.cigreen

  if test "`find ~ -maxdepth 1 -name .cinotify -mmin -1440`"; then return; fi
  touch ~/.cinotify

  if [ "$WATCHERS" = "" -o ! -f ~/.cicred ]; then return; fi
  cat /var/www/gsi-current.html | \
     sendemail -q \
       -s smtp.gmail.com \
       -o tls=yes \
       -xu cb.ci.bot@gmail.com \
       -xp "`cat ~/.cicred`" \
       -f "$CINAME <cb.ci.bot@gmail.com>" \
       -t $WATCHERS \
       -u "$CINAME broke"
}

error_exit() {
  echo "</pre><h4>Testing Failed: $1</h4><pre>"
  echo "$2"
  collect_logs
  stop_cluster
  error_email
  exit 2
}

# Setup workspace
echo "Started testing at `date +'%Y/%m/%d %H:%M:%S'`"
echo "Testing mode: $MODE"
echo "Using storage type: $STORAGE"

 # Get ulimit -n: If less than 1024, set it to 1024.
ulimitVal=$(ulimit -n)
if [ 1024 -gt $ulimitVal ]; then
  echo "Setting ulimit to 1024"
  ulimit -n 1024
fi

stop_cluster
rm -f $WORKSPACE/logs.tar.* $WORKSPACE/test.log $WORKSPACE/run.log /tmp/core-*
find ~/testdata/* -mtime +1 -exec rm {} \; 1>/dev/null 2>&1
> $WORKSPACE/test.log

export phase=sanity
if [[ "$MODE" == *"$phase"* ]]; then
  # Test the base
  echo "</pre><h4>Simple Test</h4><pre>"
  cd $WORKSPACE/testrunner
  (timeout 1h make simple-test 2>&1 | ts) | tee -a $WORKSPACE/test.log | egrep 'pass|fail|summary|ok$'
fi

# Core dumps
export GOTRACEBACK=crash
ulimit -c 2097152
sudo bash -c "echo /tmp/core-%e.$TS.%p > /proc/sys/kernel/core_pattern"
perl -pi -e 's/num_files, 10/num_files, 50/' $WORKSPACE/install/etc/couchbase/static_config


cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
gover="`grep -A20 'TARGET cbindex PACKAGE' CMakeLists.txt  | grep GOVERSION | head -1 | sed 's/^.*\([0-9]\.[0-9]*.[0-9]\).*$/\1/'`"

mkdir -p "$WORKSPACE/go" 
export GOROOT=$HOME/.cbdepscache/exploded/x86_64/go-$gover/go
export GOPATH=$WORKSPACE/go:$WORKSPACE/godeps:$WORKSPACE/goproj
export PATH=$PATH:$GOROOT/bin
export C_INCLUDE_PATH=$WORKSPACE/platform/include/:$WORKSPACE/install/include:$WORKSPACE/forestdb/include:$WORKSPACE/build/tlm/deps/curl.exploded/include:$WORKSPACE/sigar/include
export CGO_LDFLAGS="-L $WORKSPACE/install/lib"
export LD_LIBRARY_PATH=$WORKSPACE/install/lib

cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests
go get -t ./... 1>/dev/null 2>&1

AMDDIR=/home/buildbot/akhilmd/$(date +%m%d-%H%M%S)
mkdir -p $AMDDIR
test_and_prof() {
    TESTNAME=$1

    # Run test and generate profile
    GOMAXPROCS=16 ./plasma.test \
    -test.blockprofile $AMDDIR/ci-block-$TESTNAME.prof \
    -test.cpuprofile $AMDDIR/ci-cpu-$TESTNAME.prof \
    -test.memprofile $AMDDIR/ci-mem-$TESTNAME.prof \
    -test.mutexprofile $AMDDIR/ci-mutex-$TESTNAME.prof \
    -test.timeout 4h \
    -test.v \
    -test.run $TESTNAME 2>&1 | tee -a $WORKSPACE/test.log

    # Make svgs from profiles
    go tool pprof -svg plasma.test $AMDDIR/ci-block-$TESTNAME.prof > $AMDDIR/ci-block-$TESTNAME.svg
    go tool pprof -svg plasma.test $AMDDIR/ci-mem-$TESTNAME.prof > $AMDDIR/ci-mem-$TESTNAME.svg
    go tool pprof -svg plasma.test $AMDDIR/ci-cpu-$TESTNAME.prof > $AMDDIR/ci-cpu-$TESTNAME.svg
    go tool pprof -svg plasma.test $AMDDIR/ci-mutex-$TESTNAME.prof > $AMDDIR/ci-mutex-$TESTNAME.svg
}

export phase=unit
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>Unit tests</h4><pre>"

  if [ "$STORAGE" = "memdb" ]; then
      cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/memdb/skiplist
      GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

      cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/memdb
      GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  elif [ "$STORAGE" = "plasma" ]; then
      # cd $WORKSPACE/goproj/src/github.com/couchbase/nitro/skiplist
      # GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

      cd $WORKSPACE/goproj/src/github.com/couchbase/plasma
      # GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

      # Compile test binary plasma.test
      go test -c
      cp plasma.test $AMDDIR/

      test_and_prof TestShardRecoveryShared
      test_and_prof TestShardRecoveryRecoveryLogAhead
      test_and_prof TestShardRecoveryDataLogAhead
  fi

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/collatejson
  GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/indexer
  GOMAXPROCS=16 go test -vet=off -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/queryport/client
  GOMAXPROCS=16 go test -timeout 15m -v 2>&1 | tee -a $WORKSPACE/test.log
fi

export phase=functional
if [[ "$MODE" == *"$phase"* ]]; then
  stop_cluster
  start_cluster
  setUsernamePassword
  export CBAUTH_REVRPC_URL="http://$Username:$Password@127.0.0.1:9000/query"
  echo "</pre><h4>Functional tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/functionaltests
  go test -timeout 4h -v -cbconfig ../config/buildtest_$STORAGE.json -useclient n1ql 2>&1 | tee -a $WORKSPACE/test.log
  echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_1/indexer_functests_pprof.log"
  curl http://$Username:$Password@127.0.0.1:9108/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_1/indexer_functests_pprof.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/largedatatests
  go test -timeout 8h -v -cbconfig ../config/buildtest_$STORAGE.json -useclient n1ql 2>&1 | tee -a $WORKSPACE/test.log
  echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_1/indexer_largedata_pprof.log"
  curl http://$Username:$Password@127.0.0.1:9108/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_1/indexer_largedata_pprof.log
  collect_logs
  stop_cluster
fi

export phase=performance
if [[ "$MODE" == *"$phase"* ]]; then
  stop_cluster
  start_cluster
  export CBAUTH_REVRPC_URL="http://Administrator:asdasd@127.0.0.1:9000/query2"
  echo "</pre><h4>Performance tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tools/n1qlperf
  go build
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/cmd/cbindexperf
  go build
  cp $HOME/bin/config/* /opt/build/goproj/src/github.com/couchbase/indexing/secondary/tests/perftests/
  echo "</pre><h4>Performance tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/perftests
  go test -timeout 4h -v -cbconfig ../config/buildtest_memdb.json -perftool cbindexperf -numdocs 2000000 2>&1 | tee -a $WORKSPACE/test.log
  collect_logs
  stop_cluster
fi

export phase=integration
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>Integration tests</h4><pre>"
  export LD_LIBRARY_PATH=""
  cd $WORKSPACE/testrunner
  [ "$STORAGE" = "memdb" ] && export TYPE="memory_optimized"
  [ "$STORAGE" = "plasma" ] && export TYPE="plasma"
  [ "$STORAGE" = "fdb" ] && export TYPE="forestdb"
  (timeout 1h make test-gsi-integrations-tests PARAMS=gsi_type=$TYPE 2>&1) | tee -a $WORKSPACE/test.log
  collect_logs
fi

# Verify results
> /tmp/fail.log
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/ci/
grep 'make:\s\*\*\*\s\[test-gsi-integrations-tests\]\s' $WORKSPACE/test.log >> /tmp/fail.log
grep '\sfail\s*$' $WORKSPACE/test.log >> /tmp/fail.log
grep 'FAIL\s*github.com/couchbase' $WORKSPACE/test.log >> /tmp/fail.log
grep -- '--- FAIL:' $WORKSPACE/test.log >> /tmp/fail.log
grep '^\s*2i' $WORKSPACE/test.log | grep 'fail\s*$' >> /tmp/fail.log
grep '^panic: ' $WORKSPACE/test.log >> /tmp/fail.log
skiplist="`cat skip.txt`"
for tst in $skiplist; do
  echo "$tst" | grep -qs '^\s*#' && continue
  echo "$tst" | grep -qs '^\s*$' && continue
  grep -v "$tst" /tmp/fail.log > /tmp/fail-out.log
  mv /tmp/fail-out.log /tmp/fail.log
done
faillog="`cat /tmp/fail.log`"
if [ "$faillog" != "" ]; then error_exit "Required test failed" "$faillog"; fi
echo "</pre><h4>Testing Succeeded</h4><pre>"
if [ "$skiplist" != "" ]; then
  echo "But we ignored these tests:"
  echo "$skiplist"
fi
echo

cd $WORKSPACE
cat ~/repos.list | egrep -v 'plasma|nitro|forestdb' |  while read line ; do
   repo=`echo $line | awk '{print $1}'`
   loc=`echo $line | awk '{print $2}'`
   cd $loc
   git rev-parse HEAD > ~/$repo.good
done

[ "$STORAGE" = "plasma" ] && cd $WORKSPACE/goproj/src/github.com/couchbase/plasma && git rev-parse HEAD > ~/plasma.good
[ "$STORAGE" = "memdb" ] && cd $WORKSPACE/goproj/src/github.com/couchbase/nitro && git rev-parse HEAD > ~/nitro.good
[ "$STORAGE" = "fdb" ] && cd $WORKSPACE/forestdb && git rev-parse HEAD > ~/forestdb.good

if [ "$CIBOT" = "true" ]; then
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
  git rev-parse couchbase/$BRANCH > ~/indexing.good
  for patch_id in `cat ~/gerrit.list`; do
    ssh review.couchbase.org gerrit review --code-review 1 -m "'PASS $MODE with storage $STORAGE. See http://$CINAME.northscale.in/gsi-$TS.pass.html'" $patch_id
  done
fi

touch ~/.cigreen
exit 0

