#!/bin/bash

echo '</pre><h3>Testing</h3><pre>'

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

if [ "$TS" = "" ]; then
  TS="adhoc"
fi

stop_cluster() {
  killall -ABRT indexer 1>/dev/null 2>&1
  killall -ABRT projector 1>/dev/null 2>&1
  pkill -f cluster_
  pkill -f $WORKSPACE/install/bin
  pkill -f testrunner
  pkill -f /opt/couchbase
  pkill -f testrunner
  killall beam.smp epmd memcached projector indexer gometa python 1>/dev/null 2>&1
  sleep 10
  cd $WORKSPACE/ns_server
  make dataclean 1>/dev/null 2>&1
  sleep 10
}

collect_logs_cores() {
  if [ "$phase" = "" ]; then phase=unknown; fi
  tar -C /tmp       --transform "s/^/cores-$phase-/" -uf $WORKSPACE/cores.tar core* 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/"  -uf $WORKSPACE/logs.tar ns_server/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/"  -uf $WORKSPACE/logs.tar testrunner/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/"  -uf $WORKSPACE/logs.tar test.log 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/"  -uf $WORKSPACE/logs.tar run.log 1>/dev/null 2>&1
}

error_exit() {
  echo "</pre><h4>Testing Failed: $1</h4><pre>"
  echo "$2"
  collect_logs_cores
  stop_cluster
  exit 2
}

# Setup workspace
export phase=sanity
stop_cluster
rm -f $WORKSPACE/logs.tar.* $WORKSPACE/test.log $WORKSPACE/run.log /tmp/core-*
find ~/testdata/* -mtime +1 -exec rm {} \; 1>/dev/null 2>&1
warmed="never"
> $WORKSPACE/test.log

# Test the base
echo "</pre><h4>Simple Test</h4><pre>"
cd $WORKSPACE/testrunner
(timeout 1h make simple-test 2>&1) | tee -a $WORKSPACE/test.log | egrep 'pass|fail|summary|ok$'
stop_cluster

# Core dumps
# export GOTRACEBACK=crash
ulimit -c unlimited
sudo bash -c "echo /tmp/core-%e.$TS.%p > /proc/sys/kernel/core_pattern"

# Start server
echo "</pre><h4>Functional tests</h4><pre>"
echo "Starting server"
cd $WORKSPACE/ns_server
./cluster_run -n2 1>$WORKSPACE/run.log 2>&1 &
disown
for i in {1..120}; do
  grep -qs 'Couchbase Server has started' logs/n_0/info.log && \
    grep -qs 'Couchbase Server has started' logs/n_1/info.log && \
      wget -qO- http://localhost:9000/ &>/dev/null &&
        wget -qO- http://localhost:9001/ &>/dev/null &&
          ok_run=1 && break
  sleep 3
done
test "$ok_run" || error_exit "Server startup failed"
sleep 30
./cluster_connect -n2 -s 3072 -T n0:kv,n1:kv+index >$WORKSPACE/run.log 2>&1 &
for i in {1..120}; do
  grep -qs 'Bucket "default" marked as warmed' logs/n_0/info.log && \
    grep -qs 'Bucket "default" marked as warmed' logs/n_1/info.log && \
      ok_connect=1 && break
  sleep 3
done
test "$ok_connect" || error_exit "Server connect failed"
warmed="`date`"
sleep 30

echo "Starting functional tests"
export phase=functional
mkdir -p "$WORKSPACE/go" 
export GOROOT=/usr/local/go
export GOPATH=$WORKSPACE/go:$WORKSPACE/godeps:$WORKSPACE/goproj
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests
go get -t ./... 1>/dev/null 2>&1

# Go tests
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/functionaltests
go test -timeout 1h -v -cbconfig ../config/build_validation.json 2>&1 | tee -a $WORKSPACE/test.log
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/largedatatests
go test -timeout 3h -v -cbconfig ../config/build_validation.json 2>&1 | tee -a $WORKSPACE/test.log
collect_logs_cores
stop_cluster

# Integration tests
echo "</pre><h4>Integration tests</h4><pre>"
export phase=integration
cd $WORKSPACE/testrunner
(timeout 1h make test-2i-integrations-tests 2>&1) | tee -a $WORKSPACE/test.log
collect_logs_cores
stop_cluster

# Verify results
> /tmp/fail.log
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/ci/
grep '\sfail\s*$' $WORKSPACE/test.log >> /tmp/fail.log
grep -- '--- FAIL:' $WORKSPACE/test.log >> /tmp/fail.log
grep '^\s*FAIL\s*github.com/couchbase/indexing' $WORKSPACE/test.log >> /tmp/fail.log
grep '^\s*2i' $WORKSPACE/test.log | grep 'fail\s*$' >> /tmp/fail.log
skiplist="`cat skip.txt`"
for tst in $skiplist; do
  echo "$tst" | grep -qs '^\s*#' && continue
  echo "$tst" | grep -qs '^\s*$' && continue
  grep -v "$tst" /tmp/fail.log > /tmp/fail-out.log
  mv /tmp/fail-out.log /tmp/fail.log
done
faillog="`cat /tmp/fail.log`"
if [ "$faillog" != "" ]; then error_exit "Required test failed" "$faillog"; fi

# Note versions
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
git rev-parse HEAD > ~/indexing.good
cd $WORKSPACE/goproj/src/github.com/couchbase/query
git rev-parse HEAD > ~/query.good
cd $WORKSPACE/goproj/src/github.com/couchbase/gometa
git rev-parse HEAD > ~/gometa.good
cd $WORKSPACE/forestdb
git rev-parse HEAD > ~/forestdb.good
cd $WORKSPACE/testrunner
git rev-parse HEAD > ~/testrunner.good

echo "</pre><h4>Testing Succeeded</h4><pre>"
if [ "$skiplist" != "" ]; then
  echo "But we ignored these tests:"
  echo "$skiplist"
fi
echo
exit 0

