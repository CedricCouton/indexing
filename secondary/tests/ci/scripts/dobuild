#!/bin/bash

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

error_exit() {
  echo "</pre><h3>Server build failed: $1</h3><pre>"
  exit 2
}

export RELEASE=4.5.35007
export BLD_NUM="`date +%s`"

echo '</pre><h3>Building</h3><pre>'
> $WORKSPACE/versions.cfg
> $WORKSPACE/make.log

if [ ! -d $WORKSPACE/.repo ]; then
  mkdir -p $WORKSPACE
  cd $WORKSPACE
  repo init -u git://github.com/couchbase/manifest  -b master  -m toy/toy-2i-unstable.xml -g all 1>$WORKSPACE/make.log 2>&1
  test $? -eq 0 || error_exit "Repo Init"
fi

cd $WORKSPACE
if [ "$1" = "clean" ]; then
  find . -maxdepth 1 -type d -and -not -name '.*' -exec rm -rf {} \;
fi

echo "Updating tree"
repo sync --jobs=8 1>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Updating tree"
test $WORKSPACE/cbbuild && test $WORKSPACE/voltron || error_exit "Unable to find voltron"

cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
git fetch -q couchbase
current="`git rev-parse HEAD`"
test -f ~/indexing.good || (echo $current > ~/indexing.good)
good="`cat ~/indexing.good`"
echo -n "Indexing changes since last good build: "
if [ "$current" != "$good" ]; then
  echo
  git log --pretty='format: <a href="https://github.com/couchbase/indexing/commit/%H">%h</a> %s' HEAD...$good
  echo
else
  echo "none"
fi

cd $WORKSPACE/goproj/src/github.com/couchbase/query
current="`git rev-parse HEAD`"
test -f ~/query.good || (echo $current > ~/query.good)
good="`cat ~/query.good`"
echo -n "query is at <a href='https://github.com/couchbase/query/commit/$current'>${current:0:7}</a>, changes since last good build: "
if [ "$current" != "$good" ]; then
  echo
  git log --pretty='format: <a href="https://github.com/couchbase/query/commit/%H">%h</a> %s' HEAD...$good
  echo
else
  echo "none"
fi

cd $WORKSPACE/forestdb
current="`git rev-parse HEAD`"
test -f ~/forestdb.good || (echo $current > ~/forestdb.good)
good="`cat ~/forestdb.good`"
echo -n "forestdb is at <a href='https://github.com/couchbase/forestdb/commit/$current'>${current:0:7}</a>, changes since last good build: "
if [ "$current" != "$good" ]; then
  echo
  git log --pretty='format: <a href="https://github.com/couchbase/forestdb/commit/%H">%h</a> %s' HEAD...$good
  echo
else
  echo "none"
fi

cd $WORKSPACE/ep-engine
current="`git rev-parse HEAD`"
test -f ~/ep-engine.good || (echo $current > ~/ep-engine.good)
good="`cat ~/ep-engine.good`"
echo -n "ep-engine is at <a href='https://github.com/couchbase/ep-engine/commit/$current'>${current:0:7}</a>, changes since last good build: "
if [ "$current" != "$good" ]; then
  echo
  git log --pretty='format: <a href="https://github.com/couchbase/ep-engine/commit/%H">%h</a> %s' HEAD...$good
  echo
else
  echo "none"
fi

cd $WORKSPACE/testrunner
current="`git rev-parse HEAD`"
test -f ~/testrunner.good || (echo $current > ~/testrunner.good)
good="`cat ~/testrunner.good`"
echo -n "testrunner is at <a href='https://github.com/couchbase/testrunner/commit/$current'>${current:0:7}</a>, changes since last good build: "
if [ "$current" != "$good" ]; then
  echo
  git log --pretty='format: <a href="https://github.com/couchbase/testrunner/commit/%H">%h</a> %s' HEAD...$good
  echo
else
  echo "none"
fi

cd $WORKSPACE
PRODUCT_VERSION=${RELEASE}-${BLD_NUM}-rel
rm -f *.rpm *.deb
rm -rf ~/rpmbuild
rm -rf $WORKSPACE/voltron/build/deb
rm -rf /opt/couchbase/*
find goproj godeps -name \*.a -print0 | xargs -0 rm -f

cd $WORKSPACE
mkdir -p build
cd build

echo "Building main product"
cmake -D CMAKE_INSTALL_PREFIX=/opt/couchbase \
      -D CMAKE_PREFIX_PATH=/opt/couchbase \
      -D CMAKE_BUILD_TYPE=Debug \
      -D PRODUCT_VERSION=${PRODUCT_VERSION} \
      -D BUILD_ENTERPRISE=TRUE \
      -D CB_DOWNLOAD_DEPS=1 \
      -D SNAPPY_OPTION=Disable \
      .. 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Main build"

make install 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Making Install"

cd $WORKSPACE
repo manifest -r > current.xml
repo manifest -r > manifest.xml

cd $WORKSPACE/voltron
make PRODUCT_VERSION=${PRODUCT_VERSION} LICENSE=LICENSE-enterprise.txt \
     BUILD_DIR=$WORKSPACE \
     TOPDIR=$WORKSPACE/voltron build-filter overlay 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Make overlay"

cd $WORKSPACE/voltron
cp -R server-overlay-deb/common/* /opt/couchbase
PRODUCT_VERSION=${PRODUCT_VERSION} LD_LIBRARY_PATH=/opt/couchbase/lib \
   ./server-deb.rb /opt/couchbase couchbase-server couchbase server 1.0.0 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Packaging installer"

cd $WORKSPACE/voltron/build/deb/
tar cf $WORKSPACE/installer.tar couchbase*.deb 1>/dev/null 2>&1

echo "Base Manifest:" >> $WORKSPACE/versions.cfg
cd $WORKSPACE/voltron/build/deb/couchbase-server_${RELEASE}-${BLD_NUM}/opt/couchbase
cat manifest.xml >> $WORKSPACE/versions.cfg

echo "Actual Versions:" >> $WORKSPACE/versions.cfg
cd $WORKSPACE
repo forall -c 'echo "$REPO_PROJECT `git log --oneline HEAD...HEAD^`"' >> $WORKSPACE/versions.cfg

echo "Testing 32-bit compilation"
mkdir -p $WORKSPACE/test32
( \
  GOOS=linux \
  GOARCH=386 \
  GOPATH=$WORKSPACE/test32:$WORKSPACE/goproj:$WORKSPACE/godeps \
  CGO_ENABLED=1 \
  CGO_CFLAGS="-I $WORKSPACE/forestdb/include" \
  go build ./cmd/... 2>&1 | \
  grep -v 'cannot find -l' | \
  grep -v 'ld returned' > /tmp/test32.log \
)
msg32="`cat /tmp/test32.log`"
fail32=${msg32//[[:space:]]/}
if [ "$fail32" != "" ]; then error_exit "Compile with 32-bit failed" "$msg32"; fi

chmod a+r /var/www/*

