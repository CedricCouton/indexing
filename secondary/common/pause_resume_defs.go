// @author Couchbase <info@couchbase.com>
// @copyright 2016-Present Couchbase, Inc.
//
// Use of this software is governed by the Business Source License included
// in the file licenses/BSL-Couchbase.txt.  As of the Change Date specified
// in that file, in accordance with the Business Source License, use of this
// software will be governed by the Apache License, Version 2.0, included in
// the file licenses/APL2.txt.

package common

import "fmt"

////////////////////////////////////////////////////////////////////////////////////////////////////
// PauseToken
////////////////////////////////////////////////////////////////////////////////////////////////////

const PauseTokenTag = "PauseToken"
const PauseMetakvDir = IndexingMetaDir + "pause/"
const PauseTokenPathPrefix = PauseMetakvDir + PauseTokenTag

type PauseTokenType uint8

const (
	PauseTokenPause PauseTokenType = iota
	PauseTokenResume
)

type PauseToken struct {
	MasterId string
	MasterIP string

	BucketName string
	PauseId    string

	Type PauseTokenType

	Error string
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// PauseUploadToken and PauseUploadState
// Used to convey state change information between Pause master and follower nodes.
////////////////////////////////////////////////////////////////////////////////////////////////////

type PauseUploadState byte

const (
	// Posted is the initial state as generated by master. Indicates to followers to start upload work.
	// Followers change state to InProgress.
	PauseUploadTokenPosted PauseUploadState = iota

	// InProgess indicates that followers are actually performing the upload work. In addition, any
	// upload work to be done only by master is also carried out. Once all the work is done, followers
	// change the state to Processed.
	PauseUploadTokenInProgess

	// Processed indicates that for a follower, all the upload work is completed. Master will delete the token
	// and once all followers are done, cleanup is initiated.
	PauseUploadTokenProcessed

	// Error indicates that for a follower, an error was encountered during upload. Master will initiate cleanup.
	PauseUploadTokenError
)

func (s PauseUploadState) String() string {
	switch s {
	case PauseUploadTokenPosted:
		return "PauseUploadTokenPosted"
	case PauseUploadTokenInProgess:
		return "PauseUploadTokenInProgess"
	case PauseUploadTokenProcessed:
		return "PauseUploadTokenProcessed"
	case PauseUploadTokenError:
		return "PauseUploadTokenError"
	}

	return fmt.Sprintf("PauseUploadState-UNKNOWN-STATE-[%v]", byte(s))
}

const PauseUploadTokenTag = "PauseUploadToken"
const PauseUploadTokenPathPrefix = PauseMetakvDir + PauseUploadTokenTag

type PauseUploadToken struct {
	MasterId   string
	FollowerId string
	PauseId    string
	State      PauseUploadState
	BucketName string
	Error      string
	ShardPaths map[ShardId]string
}

func (put *PauseUploadToken) Clone() *PauseUploadToken {
	put1 := *put
	put2 := put1
	return &put2
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// ResumeDownloadToken and ResumeDownloadState
// Used to convey state change information between Resume master and follower nodes.
////////////////////////////////////////////////////////////////////////////////////////////////////

type ResumeDownloadState byte

const (
	// Posted is the initial state as generated by master. Indicates to followers to start download work.
	// Followers change state to InProgress.
	ResumeDownloadTokenPosted ResumeDownloadState = iota

	// InProgess indicates that followers are actually performing the download work. In addition, any
	// download work to be done only by master is also carried out. Once all the work is done, followers
	// change the state to Processed.
	ResumeDownloadTokenInProgess

	// Processed indicates that for a follower, all the download work is completed. Master will delete the token
	// and once all followers are done, cleanup is initiated.
	ResumeDownloadTokenProcessed

	// Error indicates that for a follower, an error was encountered during download. Master will initiate cleanup.
	ResumeDownloadTokenError
)

func (s ResumeDownloadState) String() string {
	switch s {
	case ResumeDownloadTokenPosted:
		return "ResumeDownloadTokenPosted"
	case ResumeDownloadTokenInProgess:
		return "ResumeDownloadTokenInProgess"
	case ResumeDownloadTokenProcessed:
		return "ResumeDownloadTokenProcessed"
	case ResumeDownloadTokenError:
		return "ResumeDownloadTokenError"
	}

	return fmt.Sprintf("ResumeDownloadState-UNKNOWN-STATE-[%v]", byte(s))
}

const ResumeDownloadTokenTag = "ResumeDownloadToken"
const ResumeDownloadTokenPathPrefix = PauseMetakvDir + ResumeDownloadTokenTag

type ResumeDownloadToken struct {
	MasterId   string
	FollowerId string
	ResumeId   string
	State      ResumeDownloadState
	BucketName string
	Error      string
	UploaderId string
	ShardPaths map[ShardId]string
}

func (rdt *ResumeDownloadToken) Clone() *ResumeDownloadToken {
	rdt1 := *rdt
	rdt2 := rdt1
	return &rdt2
}
