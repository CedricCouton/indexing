// system request and administration request supported
// by projector's admin-port.

package protobuf;

import "common.proto";
import "index.proto";

// Requested by Coordinator/indexer to learn vbuckets
// hosted by kvnodes.
message VbmapRequest {
    required string pool    = 1;
    required string bucket  = 2;
    repeated string kvaddrs = 3; // vbuckets for which failover log is request
}

message VbmapResponse {
    repeated string   kvaddrs = 1;
    repeated Vbuckets kvvbnos = 2;
    optional Error    err     = 3;
}

// Requested by Coordinator during system-start,
// re-connect, rollback
message FailoverLogRequest {
    required string pool   = 1;
    required string bucket = 2;
    repeated uint32 vbnos  = 3; // vbuckets for which failover log is request
}

message FailoverLogResponse {
    repeated FailoverLog logs = 1;
    optional Error       err  = 2;
}

// Requested by Coordinator or indexer to start a
// new mutation topic. Respond back with TopicResponse.
message MutationTopicRequest {
    required string   topic         = 1;
    required string   endpointType  = 2; // settings to RouterEndpointFactory
    repeated TsVbuuid reqTimestamps = 3; // list of timestamps, per bucket
    // initial list of instances applicable for this topic
    repeated Instance instances     = 4;
}

// Response back for
// MutationTopicRequest, RestartVbucketsRequest, AddBucketsRequest
message TopicResponse {
    optional string   topic              = 1;
    repeated uint64   instanceIds        = 2;
    repeated TsVbuuid activeTimestamps   = 3; // original requested timestamp
    repeated TsVbuuid rollbackTimestamps = 4; // sort order
    optional Error    err                = 5;
}

// RestartVbucketsRequest will restart a subset
// of vbuckets for each specified buckets.
// Respond back with TopicResponse
message RestartVbucketsRequest {
    required string   topic              = 1;
    repeated TsVbuuid restartTimestamps  = 2; // per bucket timestamps
}

// ShutdownVbucketsRequest will shutdown a subset of vbuckets
// for each specified buckets. Respond back with TopicResponse
message ShutdownVbucketsRequest {
    required string   topic              = 1;
    repeated TsVbuuid shutdownTimestamps = 2; // per bucket timestamps
}

// AddBucketsRequest will start vbucket-streams
// specified buckets and add them to the topic that
// has already started.
// Respond back with TopicResponse
message AddBucketsRequest {
    required string   topic         = 1;
    repeated TsVbuuid reqTimestamps = 2; // per bucket timestamps
    // list of instances applicable for buckets.
    repeated Instance instances     = 3;
}

// DelBucketsRequest will shutdown vbucket-streams
// for specified buckets and remove the buckets from topic.
// Respond back with TopicResponse
message DelBucketsRequest {
    required string topic   = 1;
    repeated string buckets = 2;
}

// AddInstancesRequest to add index-instances to a topic.
// Respond back with TopicResponse
message AddInstancesRequest {
    required string   topic     = 1;
    repeated Instance instances = 2; // instances to be added to this topic
}

// DelInstancesRequest to add index-instances to a topic.
// Respond back with TopicResponse
message DelInstancesRequest {
    required string topic       = 1;
    repeated uint64 instanceIds = 2; // instances to be deleted from this topic
}

// Requested by indexer / coordinator to inform router to re-connect with
// downstream endpoint. Error message will be sent as response.
message RepairEndpointsRequest {
    required string topic     = 1; // must be an already started topic.
    repeated string endpoints = 2;
}

// Requested by coordinator to should down a mutation topic and all KV
// connections active for that topic. Error message will be sent as response.
message ShutdownTopicRequest {
    required string topic = 1;
}

// Generic instance, can be an index instance, xdcr, search etc ...
message Instance {
    optional IndexInst indexInstance = 1;
}
