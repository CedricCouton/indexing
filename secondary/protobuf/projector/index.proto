// messages that describe index definition.
// Index definition is populated from DDL. Other than `IndexState` other fields
// of this structure are immutable once the index definition structure is
// created.

package protobuf;

import "partn_tp.proto";
import "partn_single.proto";
import "partn_key.proto";

// IndexDefn will be in one of the following state
enum IndexState {
    // Create index accepted, replicated and response sent back to admin
    // console.
    IndexInitial     = 1;

    // Index DDL replicated, and then communicated to participating indexers.
    IndexPending     = 2;

    // Initial-load request received from admin console, DDL replicated,
    // loading status communicated with participating indexer and
    // initial-load request is posted to projector.
    IndexLoading     = 3;

    // Initial-loading is completed for this index from all partiticipating
    // indexers, DDL replicated, and finaly initial-load stream is shutdown.
    IndexActive      = 4;

    // Delete index request is received, replicated and then communicated with
    // each participating indexer nodes.
    IndexDeleted     = 5;
}

// List of possible index storage algorithms.
enum StorageType {
    forestdb         = 1;
    memdb            = 2;
    memory_optimized = 3;
}

// Type of expression used to evaluate document.
enum ExprType {
    JAVASCRIPT = 1;
    N1QL       = 2;
}

// Type of topology, including paritition type to be used for the index.
enum  PartitionScheme {
    TEST = 1;
    SINGLE = 2;
    KEY = 3;
    HASH = 4;
    RANGE = 5;
}

// IndexInst message as payload between co-ordinator, projector, indexer.
message IndexInst {
    required uint64           instId      = 1;
    required IndexState       state       = 2;
    required IndexDefn        definition  = 3; // contains DDL
    optional TestPartition    tp          = 4;
    optional SinglePartition  singlePartn = 5;
    optional KeyPartition     keyPartn    = 6;
    //optional HashPartition    hashPartn   = 7;
    //optional RangePartition rangePartn  = 8;
}

// Index DDL from create index statement.
message IndexDefn {
    required uint64          defnID          = 1; // unique index id across the secondary index cluster
    required string          bucket          = 2; // bucket on which index is defined
    required bool            isPrimary       = 3; // whether index secondary-key == docid
    required string          name            = 4; // Name of the index
    required StorageType     using           = 5; // indexing algorithm
    required ExprType        exprType        = 6; // how to interpret `expressions` strings
    repeated string          secExpressions  = 7; // use expressions to evaluate doc
    optional PartitionScheme partitionScheme = 8;
    //optional string          partnExpression = 9; // use expressions to evaluate doc
    optional string          whereExpression = 10; // where predicate
    repeated string          partnExpressions  = 11; // use expressions to evaluate doc
    optional bool            retainDeletedXATTR = 12; // index XATTRs of deleted docs
}
