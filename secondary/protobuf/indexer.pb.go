// Code generated by protoc-gen-go.
// source: indexer.proto
// DO NOT EDIT!

package protobuf

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

// Requested by Coordinator during bootstrap to each indexer for each index,
// to check its sanity with respect to indexer nodes.
//
// Similar handshake is expected when ever a new indexer node joins the
// cluster.
type GetIndexPartitionRequest struct {
	IndexUuid        *uint64 `protobuf:"varint,1,req,name=indexUuid" json:"indexUuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetIndexPartitionRequest) Reset()         { *m = GetIndexPartitionRequest{} }
func (m *GetIndexPartitionRequest) String() string { return proto.CompactTextString(m) }
func (*GetIndexPartitionRequest) ProtoMessage()    {}

func (m *GetIndexPartitionRequest) GetIndexUuid() uint64 {
	if m != nil && m.IndexUuid != nil {
		return *m.IndexUuid
	}
	return 0
}

type GetIndexPartitionResponse struct {
	Err              *Error          `protobuf:"bytes,1,req,name=err" json:"err,omitempty"`
	Partition        *IndexPartition `protobuf:"bytes,2,req,name=partition" json:"partition,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GetIndexPartitionResponse) Reset()         { *m = GetIndexPartitionResponse{} }
func (m *GetIndexPartitionResponse) String() string { return proto.CompactTextString(m) }
func (*GetIndexPartitionResponse) ProtoMessage()    {}

func (m *GetIndexPartitionResponse) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetIndexPartitionResponse) GetPartition() *IndexPartition {
	if m != nil {
		return m.Partition
	}
	return nil
}

// Requested by Coordinator when ever an index's topology change. Error
// message will be sent as response.
// TBD: Should we use the same message for index-rebalance ?
type UpdateIndexPartitionRequest struct {
	IndexUuid        *uint64         `protobuf:"varint,1,req,name=indexUuid" json:"indexUuid,omitempty"`
	NewParitition    *IndexPartition `protobuf:"bytes,2,req,name=newParitition" json:"newParitition,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UpdateIndexPartitionRequest) Reset()         { *m = UpdateIndexPartitionRequest{} }
func (m *UpdateIndexPartitionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateIndexPartitionRequest) ProtoMessage()    {}

func (m *UpdateIndexPartitionRequest) GetIndexUuid() uint64 {
	if m != nil && m.IndexUuid != nil {
		return *m.IndexUuid
	}
	return 0
}

func (m *UpdateIndexPartitionRequest) GetNewParitition() *IndexPartition {
	if m != nil {
		return m.NewParitition
	}
	return nil
}

// Requested by Coordinator when new index is created and before starting a
// initial load stream.
type LocalCreateIndexRequest struct {
	// first request, state will be IndexInitial
	// second request, state will be IndexLoading
	State            *IndexState `protobuf:"varint,1,req,name=state,enum=protobuf.IndexState" json:"state,omitempty"`
	Index            *Index      `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *LocalCreateIndexRequest) Reset()         { *m = LocalCreateIndexRequest{} }
func (m *LocalCreateIndexRequest) String() string { return proto.CompactTextString(m) }
func (*LocalCreateIndexRequest) ProtoMessage()    {}

func (m *LocalCreateIndexRequest) GetState() IndexState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return IndexState_IndexInitial
}

func (m *LocalCreateIndexRequest) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

type LocalCreateIndexResponse struct {
	// state will IndexPending for IndexInitial Request, and,
	// state will be IndexLoading for IndexLoading request
	State            *IndexState `protobuf:"varint,1,req,name=state,enum=protobuf.IndexState" json:"state,omitempty"`
	Err              *Error      `protobuf:"bytes,2,req,name=err" json:"err,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *LocalCreateIndexResponse) Reset()         { *m = LocalCreateIndexResponse{} }
func (m *LocalCreateIndexResponse) String() string { return proto.CompactTextString(m) }
func (*LocalCreateIndexResponse) ProtoMessage()    {}

func (m *LocalCreateIndexResponse) GetState() IndexState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return IndexState_IndexInitial
}

func (m *LocalCreateIndexResponse) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// Requested by Coordinator when existing index is deleted. Error message will
// be set as reponse.
type LocalDeleteIndexRequest struct {
	IndexUuid        *uint64 `protobuf:"varint,1,req,name=indexUuid" json:"indexUuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LocalDeleteIndexRequest) Reset()         { *m = LocalDeleteIndexRequest{} }
func (m *LocalDeleteIndexRequest) String() string { return proto.CompactTextString(m) }
func (*LocalDeleteIndexRequest) ProtoMessage()    {}

func (m *LocalDeleteIndexRequest) GetIndexUuid() uint64 {
	if m != nil && m.IndexUuid != nil {
		return *m.IndexUuid
	}
	return 0
}

// Posted by Coordinator while promoting timestamp to persistence timestamp.
// Error message will be sent as response.
type NewPersistenceTimestampRequest struct {
	NextPersistenceTs *Timestamp `protobuf:"bytes,1,req,name=nextPersistenceTs" json:"nextPersistenceTs,omitempty"`
	XXX_unrecognized  []byte     `json:"-"`
}

func (m *NewPersistenceTimestampRequest) Reset()         { *m = NewPersistenceTimestampRequest{} }
func (m *NewPersistenceTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*NewPersistenceTimestampRequest) ProtoMessage()    {}

func (m *NewPersistenceTimestampRequest) GetNextPersistenceTs() *Timestamp {
	if m != nil {
		return m.NextPersistenceTs
	}
	return nil
}

// Posted by Coordinator while promoting timestamp to stability timestamp.
// Error message will be sent as response.
type NewStabilityTimestampRequest struct {
	NextStabilityTs  *Timestamp `protobuf:"bytes,1,req,name=nextStabilityTs" json:"nextStabilityTs,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *NewStabilityTimestampRequest) Reset()         { *m = NewStabilityTimestampRequest{} }
func (m *NewStabilityTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*NewStabilityTimestampRequest) ProtoMessage()    {}

func (m *NewStabilityTimestampRequest) GetNextStabilityTs() *Timestamp {
	if m != nil {
		return m.NextStabilityTs
	}
	return nil
}

// Requested by Coordinator during KV-reconnection / rollback. Coordinator
// requests a list of buckets for which it needs indexer's hw-timestamp.
type HWTimestampRequest struct {
	Bucket           []string `protobuf:"bytes,1,rep,name=bucket" json:"bucket,omitempty"`
	Topic            *string  `protobuf:"bytes,2,req,name=topic" json:"topic,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HWTimestampRequest) Reset()         { *m = HWTimestampRequest{} }
func (m *HWTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*HWTimestampRequest) ProtoMessage()    {}

func (m *HWTimestampRequest) GetBucket() []string {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *HWTimestampRequest) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

type HWTimestampResponse struct {
	BranchTimestamp  []string `protobuf:"bytes,1,rep" json:"BranchTimestamp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HWTimestampResponse) Reset()         { *m = HWTimestampResponse{} }
func (m *HWTimestampResponse) String() string { return proto.CompactTextString(m) }
func (*HWTimestampResponse) ProtoMessage()    {}

func (m *HWTimestampResponse) GetBranchTimestamp() []string {
	if m != nil {
		return m.BranchTimestamp
	}
	return nil
}

// Requested by Coordinator to rollback to a snapshot such that its snapshot-timestamp
// is less than failover-timestamp but greater than or equal to upr-timestamp.
// This request will be sent twice to each indexer node.
type RollbackRequest struct {
	Bucket *string `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	// first as RollbackStart along with failoverTimestamp
	// second as RollbackCommit along with failoverTimestamp and uprTimestamp
	State             *RollbackState   `protobuf:"varint,2,req,name=state,enum=protobuf.RollbackState" json:"state,omitempty"`
	FailoverTimestamp *BranchTimestamp `protobuf:"bytes,3,req,name=failoverTimestamp" json:"failoverTimestamp,omitempty"`
	UprTimestamp      *BranchTimestamp `protobuf:"bytes,4,opt,name=uprTimestamp" json:"uprTimestamp,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *RollbackRequest) Reset()         { *m = RollbackRequest{} }
func (m *RollbackRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackRequest) ProtoMessage()    {}

func (m *RollbackRequest) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *RollbackRequest) GetState() RollbackState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return RollbackState_RollbackStart
}

func (m *RollbackRequest) GetFailoverTimestamp() *BranchTimestamp {
	if m != nil {
		return m.FailoverTimestamp
	}
	return nil
}

func (m *RollbackRequest) GetUprTimestamp() *BranchTimestamp {
	if m != nil {
		return m.UprTimestamp
	}
	return nil
}

type RollbackResponse struct {
	Bucket *string `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	// first as RollbackPrepare with snapshotTimestamp
	// second as RollbackDone
	State             *RollbackState   `protobuf:"varint,2,req,name=state,enum=protobuf.RollbackState" json:"state,omitempty"`
	SnapshotTimestamp *BranchTimestamp `protobuf:"bytes,3,opt,name=snapshotTimestamp" json:"snapshotTimestamp,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *RollbackResponse) Reset()         { *m = RollbackResponse{} }
func (m *RollbackResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackResponse) ProtoMessage()    {}

func (m *RollbackResponse) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *RollbackResponse) GetState() RollbackState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return RollbackState_RollbackStart
}

func (m *RollbackResponse) GetSnapshotTimestamp() *BranchTimestamp {
	if m != nil {
		return m.SnapshotTimestamp
	}
	return nil
}

func init() {
}
